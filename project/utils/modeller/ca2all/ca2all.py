import argparse
import glob
import logging
import os
import re
import sys
from os.path import basename
from tempfile import mkstemp

try:
    from Align import Align
    from NumChains import NumChains
    from internal import NumResidues
    from internal import Rebuild
except:
    logging.info(f'ca2all/ca2all.py: Modeller not installed')


# -------------------------------------------------------------------------------------------------------------------------------------
# Following code adapted from Modeller at: https://bitbucket.org/lcbio/ca2all/src/master/
# -------------------------------------------------------------------------------------------------------------------------------------


def ca2all(models, which=1, template=None, output=None, iterations=1, hydrogens=False, verbose=False):
    old_stdout = sys.stdout
    if verbose:
        sys.stdout = sys.stderr
    else:
        sys.stdout = open(os.devnull, 'w')

    pattern = re.compile('ATOM.{9}CA .([A-Z]{3}) ([A-Z ])(.{5}).{27}(.{12}).*')
    pdb = mkstemp(prefix='.', suffix='.pdb', dir='.', text=True)[1]
    prefix = basename(pdb).rsplit('.', 1)[0]
    atoms = []
    chains = []
    seq = ''
    try:
        with open(models, 'r') as f, open(pdb, 'w') as tmp:
            for line in f:
                if line.startswith('ENDMDL'):
                    break
                else:
                    match = re.match(pattern, line)
                    if match:
                        atoms.append(match.groups())  # ('GLU', 'A', ' 207 ', '  1.00 37.96')
                        tmp.write(line)
        if not len(atoms):
            raise Exception('File %s contains no CA atoms' % filename)

        pir = prefix + '.pir'
        Align(pdb, pdb, template, pir)
        with open(pir, 'r') as ff:  ########################################################
            print >> sys.stderr, ff.read()  ################################################

        ####---MODEL SELECTION & MODELLER REFINEMENT---####

        if which == 1:
            final = Rebuild(pdb, pir, template, output, iterations)
            NumResidues(final, atoms, output)
        elif which > 1:
            with open(models, 'r') as f, open(pdb, 'w') as tmp:
                is_ok = False
                for line in f:
                    if line.startswith('MODEL'):
                        list = line.split()
                        id = list[1]
                        if int(id) == int(which):
                            is_ok = True
                    if is_ok == True:
                        tmp.write(line)
                        if line.startswith('ENDMDL'):
                            break
            NumChains(pdb)
            final = Rebuild(pdb, pir, template, output, iterations)
            NumResidues(final, atoms, output + '-' + id)
        else:
            with open(models, 'r') as f:
                is_ok = False
                for line in f:
                    if line.startswith('MODEL'):
                        tmp = open(pdb, 'w')
                        tmp.truncate(0)
                        id = line.split()[1]
                        is_ok = True
                    if is_ok == True:
                        tmp = open(pdb, 'a+')
                        tmp.write(line)
                    if line.startswith('ENDMDL'):
                        NumChains(pdb)
                        final = Rebuild(pdb, pir, template, output, iterations)
                        is_ok = False
                        NumResidues(final, atoms, output + '-' + id)

    finally:
        junk = glob.glob(prefix + '*')
        map(os.remove, junk)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='ca2all',
        description="""
Program rebuilds all atom representation from CA-only models.
Models are generated by modeller's automodel method and assessed
by the DOPE score.""",
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=''
    )
    parser.add_argument(
        '-i', '--input-pdb',
        help='input pdb file with structure in Ca representation',
        metavar='INPUT',
        dest='inp',
        required=True
    )
    parser.add_argument(
        '-ii', '--index-of-model',
        help='which model from trajectory',
        metavar='WHICH',
        dest='which',
        type=int,
        default=1
    )
    parser.add_argument(
        '-t', '--template-pdb',
        help='template pdb file with structure in all-atom representation',
        metavar='TEMPLATE',
        dest='tpl',
        default=None
    )
    parser.add_argument(
        '-o', '--output-pdb',
        help='save output pdb [default stdout]',
        default=None,
        metavar='OUTPUT',
        dest='out'
    )
    parser.add_argument(
        '-n', '--modeller-iterations',
        help='number of models generated by modeller',
        metavar='ITER',
        type=int,
        default=1,
        dest='iter'
    )
    parser.add_argument(
        '-k, --add-hydrogens',
        help='add hydrogen atoms to final all-atom structure',
        action='store_true',
        dest='hydrogens'
    )
    parser.add_argument(
        '-v, --verbose',
        help='print modeller output to stderr',
        action='store_true',
        dest='verbosity'
    )
    args = parser.parse_args()
    ca2all(args.inp, args.which, args.tpl, args.out, args.iter, args.hydrogens, args.verbosity)
